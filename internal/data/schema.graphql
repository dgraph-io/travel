directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE
directive @dgraph(
  type: String
  pred: String
) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
  query: AuthRule
  add: AuthRule
  update: AuthRule
  delete: AuthRule
) on OBJECT
directive @custom(http: CustomHTTP) on FIELD_DEFINITION
directive @cascade on FIELD
input AddAdvisoryInput {
  continent: String!
  country: String!
  country_code: String!
  last_updated: String
  message: String
  score: Float!
  source: String
}

type AddAdvisoryPayload {
  advisory(
    filter: AdvisoryFilter
    order: AdvisoryOrder
    first: Int
    offset: Int
  ): [Advisory]
  numUids: Int
}

input AddCityInput {
  name: String!
  lat: Float!
  lng: Float!
  places: [PlaceRef]
  advisory: AdvisoryRef
  weather: WeatherRef
}

type AddCityPayload {
  city(filter: CityFilter, order: CityOrder, first: Int, offset: Int): [City]
  numUids: Int
}

input AddPlaceInput {
  address: String
  avg_user_rating: Float
  category: String
  city: CityRef!
  city_name: String!
  gmaps_url: String
  lat: Float!
  lng: Float!
  location_type: [String]
  name: String!
  no_user_rating: Int
  place_id: String!
  photo_id: String
}

type AddPlacePayload {
  place(
    filter: PlaceFilter
    order: PlaceOrder
    first: Int
    offset: Int
  ): [Place]
  numUids: Int
}

input AddUserInput {
  name: String!
  email: String!
  roles: [Roles]!
  password_hash: String!
  date_created: DateTime!
  date_updated: DateTime!
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddWeatherInput {
  city_name: String!
  description: String
  feels_like: Float
  humidity: Int
  pressure: Int
  sunrise: Int
  sunset: Int
  temp: Float
  temp_min: Float
  temp_max: Float
  visibility: String
  wind_direction: Int
  wind_speed: Float
}

type AddWeatherPayload {
  weather(
    filter: WeatherFilter
    order: WeatherOrder
    first: Int
    offset: Int
  ): [Weather]
  numUids: Int
}

type Advisory {
  id: ID!
  continent: String!
  country: String!
  country_code: String!
  last_updated: String
  message: String
  score: Float!
  source: String
}

input AdvisoryFilter {
  id: [ID!]
  not: AdvisoryFilter
}

input AdvisoryOrder {
  asc: AdvisoryOrderable
  desc: AdvisoryOrderable
  then: AdvisoryOrder
}

enum AdvisoryOrderable {
  continent
  country
  country_code
  last_updated
  message
  score
  source
}

input AdvisoryPatch {
  continent: String
  country: String
  country_code: String
  last_updated: String
  message: String
  score: Float
  source: String
}

input AdvisoryRef {
  id: ID
  continent: String
  country: String
  country_code: String
  last_updated: String
  message: String
  score: Float
  source: String
}

input AuthRule {
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

type City {
  id: ID!
  name: String!
  lat: Float!
  lng: Float!
  places(
    filter: PlaceFilter
    order: PlaceOrder
    first: Int
    offset: Int
  ): [Place]
  advisory(filter: AdvisoryFilter): Advisory
  weather(filter: WeatherFilter): Weather
}

input CityFilter {
  id: [ID!]
  name: StringExactFilter
  and: CityFilter
  or: CityFilter
  not: CityFilter
}

input CityOrder {
  asc: CityOrderable
  desc: CityOrderable
  then: CityOrder
}

enum CityOrderable {
  name
  lat
  lng
}

input CityPatch {
  name: String
  lat: Float
  lng: Float
  places: [PlaceRef]
  advisory: AdvisoryRef
  weather: WeatherRef
}

input CityRef {
  id: ID
  name: String
  lat: Float
  lng: Float
  places: [PlaceRef]
  advisory: AdvisoryRef
  weather: WeatherRef
}

input CustomHTTP {
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  skipIntrospection: Boolean
}

scalar DateTime

input DateTimeFilter {
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
}

type DeleteAdvisoryPayload {
  msg: String
  numUids: Int
}

type DeleteCityPayload {
  msg: String
  numUids: Int
}

type DeletePlacePayload {
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  msg: String
  numUids: Int
}

type DeleteWeatherPayload {
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
}

type EmailResponse {
  id: ID!
  email: String
  subject: String
  err: String
}

input FloatFilter {
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

input IntFilter {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
}

enum Mode {
  BATCH
  SINGLE
}

type Mutation {
  addUser(input: [AddUserInput!]!): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  addCity(input: [AddCityInput!]!): AddCityPayload
  updateCity(input: UpdateCityInput!): UpdateCityPayload
  deleteCity(filter: CityFilter!): DeleteCityPayload
  addAdvisory(input: [AddAdvisoryInput!]!): AddAdvisoryPayload
  updateAdvisory(input: UpdateAdvisoryInput!): UpdateAdvisoryPayload
  deleteAdvisory(filter: AdvisoryFilter!): DeleteAdvisoryPayload
  addPlace(input: [AddPlaceInput!]!): AddPlacePayload
  updatePlace(input: UpdatePlaceInput!): UpdatePlacePayload
  deletePlace(filter: PlaceFilter!): DeletePlacePayload
  addWeather(input: [AddWeatherInput!]!): AddWeatherPayload
  updateWeather(input: UpdateWeatherInput!): UpdateWeatherPayload
  deleteWeather(filter: WeatherFilter!): DeleteWeatherPayload
}

type Place {
  id: ID!
  address: String
  avg_user_rating: Float
  category: String
  city(filter: CityFilter): City!
  city_name: String!
  gmaps_url: String
  lat: Float!
  lng: Float!
  location_type: [String]
  name: String!
  no_user_rating: Int
  place_id: String!
  photo_id: String
}

input PlaceFilter {
  id: [ID!]
  category: StringExactFilter
  name: StringExactFilter
  and: PlaceFilter
  or: PlaceFilter
  not: PlaceFilter
}

input PlaceOrder {
  asc: PlaceOrderable
  desc: PlaceOrderable
  then: PlaceOrder
}

enum PlaceOrderable {
  address
  avg_user_rating
  category
  city_name
  gmaps_url
  lat
  lng
  location_type
  name
  no_user_rating
  place_id
  photo_id
}

input PlacePatch {
  address: String
  avg_user_rating: Float
  category: String
  city: CityRef
  city_name: String
  gmaps_url: String
  lat: Float
  lng: Float
  location_type: [String]
  name: String
  no_user_rating: Int
  place_id: String
  photo_id: String
}

input PlaceRef {
  id: ID
  address: String
  avg_user_rating: Float
  category: String
  city: CityRef
  city_name: String
  gmaps_url: String
  lat: Float
  lng: Float
  location_type: [String]
  name: String
  no_user_rating: Int
  place_id: String
  photo_id: String
}

type Query {
  sendEmail(email: String!, subject: String!): EmailResponse
  getUser(id: ID!): User
  queryUser(
    filter: UserFilter
    order: UserOrder
    first: Int
    offset: Int
  ): [User]
  getCity(id: ID!): City
  queryCity(
    filter: CityFilter
    order: CityOrder
    first: Int
    offset: Int
  ): [City]
  getAdvisory(id: ID!): Advisory
  queryAdvisory(
    filter: AdvisoryFilter
    order: AdvisoryOrder
    first: Int
    offset: Int
  ): [Advisory]
  getPlace(id: ID!): Place
  queryPlace(
    filter: PlaceFilter
    order: PlaceOrder
    first: Int
    offset: Int
  ): [Place]
  getWeather(id: ID!): Weather
  queryWeather(
    filter: WeatherFilter
    order: WeatherOrder
    first: Int
    offset: Int
  ): [Weather]
}

enum Roles {
  Admin
  Email
  Mutate
  Query
}

input StringExactFilter {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

input UpdateAdvisoryInput {
  filter: AdvisoryFilter!
  set: AdvisoryPatch
  remove: AdvisoryPatch
}

type UpdateAdvisoryPayload {
  advisory(
    filter: AdvisoryFilter
    order: AdvisoryOrder
    first: Int
    offset: Int
  ): [Advisory]
  numUids: Int
}

input UpdateCityInput {
  filter: CityFilter!
  set: CityPatch
  remove: CityPatch
}

type UpdateCityPayload {
  city(filter: CityFilter, order: CityOrder, first: Int, offset: Int): [City]
  numUids: Int
}

input UpdatePlaceInput {
  filter: PlaceFilter!
  set: PlacePatch
  remove: PlacePatch
}

type UpdatePlacePayload {
  place(
    filter: PlaceFilter
    order: PlaceOrder
    first: Int
    offset: Int
  ): [Place]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input UpdateWeatherInput {
  filter: WeatherFilter!
  set: WeatherPatch
  remove: WeatherPatch
}

type UpdateWeatherPayload {
  weather(
    filter: WeatherFilter
    order: WeatherOrder
    first: Int
    offset: Int
  ): [Weather]
  numUids: Int
}

type User {
  id: ID!
  name: String!
  email: String!
  roles(first: Int, offset: Int): [Roles]!
  password_hash: String!
  date_created: DateTime!
  date_updated: DateTime!
}

input UserFilter {
  id: [ID!]
  not: UserFilter
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  name
  email
  password_hash
  date_created
  date_updated
}

input UserPatch {
  name: String
  email: String
  roles: [Roles]
  password_hash: String
  date_created: DateTime
  date_updated: DateTime
}

input UserRef {
  id: ID
  name: String
  email: String
  roles: [Roles]
  password_hash: String
  date_created: DateTime
  date_updated: DateTime
}

type Weather {
  id: ID!
  city_name: String!
  description: String
  feels_like: Float
  humidity: Int
  pressure: Int
  sunrise: Int
  sunset: Int
  temp: Float
  temp_min: Float
  temp_max: Float
  visibility: String
  wind_direction: Int
  wind_speed: Float
}

input WeatherFilter {
  id: [ID!]
  not: WeatherFilter
}

input WeatherOrder {
  asc: WeatherOrderable
  desc: WeatherOrderable
  then: WeatherOrder
}

enum WeatherOrderable {
  city_name
  description
  feels_like
  humidity
  pressure
  sunrise
  sunset
  temp
  temp_min
  temp_max
  visibility
  wind_direction
  wind_speed
}

input WeatherPatch {
  city_name: String
  description: String
  feels_like: Float
  humidity: Int
  pressure: Int
  sunrise: Int
  sunset: Int
  temp: Float
  temp_min: Float
  temp_max: Float
  visibility: String
  wind_direction: Int
  wind_speed: Float
}

input WeatherRef {
  id: ID
  city_name: String
  description: String
  feels_like: Float
  humidity: Int
  pressure: Int
  sunrise: Int
  sunset: Int
  temp: Float
  temp_min: Float
  temp_max: Float
  visibility: String
  wind_direction: Int
  wind_speed: Float
}